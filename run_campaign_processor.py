#!/usr/bin/env python3
"""
Script ƒë·ªÉ x·ª≠ l√Ω campaigns c√≥ status 'Scheduled'
L·∫•y d·ªØ li·ªáu t·ª´ MongoDB ho·∫∑c CSV, t√¨m FCM tokens ph√π h·ª£p v√† g·ª≠i l√™n Kafka topic "push-ready"

C√°ch s·ª≠ d·ª•ng:
# G·ª≠i l√™n Kafka topic "push-ready"
python run_campaign_processor.py --source mongodb --kafka-topic push-ready

# G·ª≠i l√™n Kafka topic kh√°c
python run_campaign_processor.py --source mongodb --kafka-topic custom-topic

# Dry-run ƒë·ªÉ xem tr∆∞·ªõc
python run_campaign_processor.py --source mongodb --dry-run
"""

import sys
import os
import argparse
import pandas as pd

# Th√™m path ƒë·ªÉ import c√°c module
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.campaign_processor import CampaignProcessor
from app.core.service_init import init_services
from app.core.logger import logger

def main():
    parser = argparse.ArgumentParser(description='Campaign Processor for Scheduled campaigns')
    parser.add_argument('--source', choices=['csv', 'mongodb'], default='csv',
                       help='Ngu·ªìn d·ªØ li·ªáu campaigns (csv ho·∫∑c mongodb)')
    parser.add_argument('--kafka-topic', default='push-ready',
                       help='Kafka topic ƒë·ªÉ g·ª≠i d·ªØ li·ªáu')
    parser.add_argument('--collection-name', default='test',
                       help='T√™n collection MongoDB ch·ª©a campaigns')
    parser.add_argument('--dry-run', action='store_true',
                       help='Ch·∫°y th·ª≠ kh√¥ng g·ª≠i l√™n Kafka')
    
    args = parser.parse_args()
    
    try:
        # Kh·ªüi t·∫°o services
        logger.info("üöÄ Kh·ªüi t·∫°o services...")
        init_services()
        
        # T·∫°o processor
        processor = CampaignProcessor()
        
        if args.dry_run:
            logger.info("üß™ Ch·∫ø ƒë·ªô dry-run: S·∫Ω kh√¥ng g·ª≠i d·ªØ li·ªáu l√™n Kafka")
            
            # L·∫•y campaigns
            if args.source == 'mongodb':
                campaigns = processor.get_Scheduled_campaigns_from_mongodb()
            else:
                campaigns = processor.get_Scheduled_campaigns_from_csv()
            
            if not campaigns:
                logger.warning("Kh√¥ng t√¨m th·∫•y campaigns n√†o c√≥ status 'Scheduled'")
                return
            
            # Xem tr∆∞·ªõc d·ªØ li·ªáu
            for campaign in campaigns:
                segment = campaign.get('segment', '')
                platform = campaign.get('platform', '')
                language = campaign.get('language', '')
                country = campaign.get('country', '')
                message = campaign.get('message', '')
                
                logger.info(f"Campaign ID: {campaign.get('_id', 'N/A')}")
                logger.info(f"  Segment: {segment}")
                logger.info(f"  Platform: {platform}")
                logger.info(f"  Language: {language}")
                logger.info(f"  Country: {country}")
                logger.info(f"  Message: {message[:50]}...")
                
                # L·∫•y m·ªôt s·ªë FCM tokens ƒë·ªÉ xem tr∆∞·ªõc
                fcm_tokens = processor.get_fcm_tokens_by_segment_platform(segment, platform, language, country)
                logger.info(f"  T√¨m th·∫•y {len(fcm_tokens)} FCM tokens")
                
                if fcm_tokens:
                    logger.info(f"  Sample tokens: {fcm_tokens[:3]}...")
                    # Preview format Kafka message
                    preview_payload = {
                        "message": message,
                        "tokens": fcm_tokens[:3]  # Ch·ªâ show 3 tokens ƒë·∫ßu
                    }
                    logger.info(f"  Kafka payload preview: {preview_payload}")
                logger.info("-" * 50)
        else:
            # Ch·∫°y th·∫≠t - g·ª≠i l√™n Kafka
            use_mongodb = (args.source == 'mongodb')
            processor.process_Scheduled_campaigns(
                use_mongodb=use_mongodb, 
                kafka_topic=args.kafka_topic,
                collection_name=args.collection_name
            )
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
